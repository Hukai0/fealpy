from typing import Protocol, Sequence, TypeVar

from ...backend import TensorLike
from ...mesh.mesh_base import Mesh

class EllipticPDEDataProtocol(Protocol):
    def geo_dimension(self) -> int: ...
    def domain(self) -> Sequence[float]: ...
    def diffusion_coef(self, p: TensorLike) -> TensorLike: ...
    def diffusion_coef_inv(self, p: TensorLike) -> TensorLike: ...
    def advection_coef(self, p: TensorLike) -> TensorLike: ...
    def reaction_coef(self, p: TensorLike) -> TensorLike: ...
    def solution(self, p: TensorLike) -> TensorLike: ...
    def gradient(self, p: TensorLike) -> TensorLike: ...
    def flux(self, p: TensorLike) -> TensorLike: ...
    def source(self, p: TensorLike) -> TensorLike: ...
    def dirichlet(self, p: TensorLike) -> TensorLike: ...
    def is_dirichlet_boundary(self, p: TensorLike) -> TensorLike: ...
    def neumann(self, p: TensorLike) -> TensorLike: ...
    def is_neumann_boundary(self, p: TensorLike) -> TensorLike: ...
    def robin(self, p: TensorLike) -> TensorLike: ...
    def is_robin_boundary(self, p: TensorLike) -> TensorLike: ...

EllipticPDEDataT = TypeVar('EllipticPDEDataT', bound=EllipticPDEDataProtocol)


DATA_TABLE = {
    # example name: (file_name, class_name)
    "coscos": ("cos_cos_data_2d", "CosCosData2D"),
    "sinsin": ("sin_sin_data_2d", "SinSinData2D"),
}
